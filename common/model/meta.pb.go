// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: meta.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PropertyOrObject struct {
	// Types that are valid to be assigned to Filed:
	//	*PropertyOrObject_Prop
	//	*PropertyOrObject_Obj
	Filed isPropertyOrObject_Filed `protobuf_oneof:"filed"`
}

func (m *PropertyOrObject) Reset()                    { *m = PropertyOrObject{} }
func (m *PropertyOrObject) String() string            { return proto.CompactTextString(m) }
func (*PropertyOrObject) ProtoMessage()               {}
func (*PropertyOrObject) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{0} }

type isPropertyOrObject_Filed interface {
	isPropertyOrObject_Filed()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PropertyOrObject_Prop struct {
	Prop *MetaProperty `protobuf:"bytes,1,opt,name=prop,oneof"`
}
type PropertyOrObject_Obj struct {
	Obj *MetaObject `protobuf:"bytes,2,opt,name=obj,oneof"`
}

func (*PropertyOrObject_Prop) isPropertyOrObject_Filed() {}
func (*PropertyOrObject_Obj) isPropertyOrObject_Filed()  {}

func (m *PropertyOrObject) GetFiled() isPropertyOrObject_Filed {
	if m != nil {
		return m.Filed
	}
	return nil
}

func (m *PropertyOrObject) GetProp() *MetaProperty {
	if x, ok := m.GetFiled().(*PropertyOrObject_Prop); ok {
		return x.Prop
	}
	return nil
}

func (m *PropertyOrObject) GetObj() *MetaObject {
	if x, ok := m.GetFiled().(*PropertyOrObject_Obj); ok {
		return x.Obj
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PropertyOrObject) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PropertyOrObject_OneofMarshaler, _PropertyOrObject_OneofUnmarshaler, _PropertyOrObject_OneofSizer, []interface{}{
		(*PropertyOrObject_Prop)(nil),
		(*PropertyOrObject_Obj)(nil),
	}
}

func _PropertyOrObject_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PropertyOrObject)
	// filed
	switch x := m.Filed.(type) {
	case *PropertyOrObject_Prop:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prop); err != nil {
			return err
		}
	case *PropertyOrObject_Obj:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Obj); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PropertyOrObject.Filed has unexpected type %T", x)
	}
	return nil
}

func _PropertyOrObject_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PropertyOrObject)
	switch tag {
	case 1: // filed.prop
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MetaProperty)
		err := b.DecodeMessage(msg)
		m.Filed = &PropertyOrObject_Prop{msg}
		return true, err
	case 2: // filed.obj
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MetaObject)
		err := b.DecodeMessage(msg)
		m.Filed = &PropertyOrObject_Obj{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PropertyOrObject_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PropertyOrObject)
	// filed
	switch x := m.Filed.(type) {
	case *PropertyOrObject_Prop:
		s := proto.Size(x.Prop)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PropertyOrObject_Obj:
		s := proto.Size(x.Obj)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SpecItem struct {
	Name  string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *PrimitiveValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SpecItem) Reset()                    { *m = SpecItem{} }
func (m *SpecItem) String() string            { return proto.CompactTextString(m) }
func (*SpecItem) ProtoMessage()               {}
func (*SpecItem) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{1} }

func (m *SpecItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpecItem) GetValue() *PrimitiveValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type PrimitiveTypeSpec struct {
	Items []*SpecItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *PrimitiveTypeSpec) Reset()                    { *m = PrimitiveTypeSpec{} }
func (m *PrimitiveTypeSpec) String() string            { return proto.CompactTextString(m) }
func (*PrimitiveTypeSpec) ProtoMessage()               {}
func (*PrimitiveTypeSpec) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{2} }

func (m *PrimitiveTypeSpec) GetItems() []*SpecItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type MetaProperty struct {
	Name              string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ShowName          string              `protobuf:"bytes,2,opt,name=showName,proto3" json:"showName,omitempty"`
	Description       string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Version           int64               `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	PrimitiveType     string              `protobuf:"bytes,5,opt,name=primitiveType,proto3" json:"primitiveType,omitempty"`
	PrimitiveTypeSpec *PrimitiveTypeSpec  `protobuf:"bytes,6,opt,name=primitiveTypeSpec" json:"primitiveTypeSpec,omitempty"`
	Logged            bool                `protobuf:"varint,7,opt,name=logged,proto3" json:"logged,omitempty"`
	Persisted         bool                `protobuf:"varint,8,opt,name=persisted,proto3" json:"persisted,omitempty"`
	Readonly          bool                `protobuf:"varint,9,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Field             []*PropertyOrObject `protobuf:"bytes,10,rep,name=field" json:"field,omitempty"`
	DefaultValue      *Value              `protobuf:"bytes,11,opt,name=defaultValue" json:"defaultValue,omitempty"`
}

func (m *MetaProperty) Reset()                    { *m = MetaProperty{} }
func (m *MetaProperty) String() string            { return proto.CompactTextString(m) }
func (*MetaProperty) ProtoMessage()               {}
func (*MetaProperty) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{3} }

func (m *MetaProperty) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetaProperty) GetShowName() string {
	if m != nil {
		return m.ShowName
	}
	return ""
}

func (m *MetaProperty) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetaProperty) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MetaProperty) GetPrimitiveType() string {
	if m != nil {
		return m.PrimitiveType
	}
	return ""
}

func (m *MetaProperty) GetPrimitiveTypeSpec() *PrimitiveTypeSpec {
	if m != nil {
		return m.PrimitiveTypeSpec
	}
	return nil
}

func (m *MetaProperty) GetLogged() bool {
	if m != nil {
		return m.Logged
	}
	return false
}

func (m *MetaProperty) GetPersisted() bool {
	if m != nil {
		return m.Persisted
	}
	return false
}

func (m *MetaProperty) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

func (m *MetaProperty) GetField() []*PropertyOrObject {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *MetaProperty) GetDefaultValue() *Value {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

type MetaObject struct {
	Name         string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ShowName     string              `protobuf:"bytes,2,opt,name=showName,proto3" json:"showName,omitempty"`
	Description  string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Version      int64               `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ValueStream  string              `protobuf:"bytes,5,opt,name=valueStream,proto3" json:"valueStream,omitempty"`
	TemplateName string              `protobuf:"bytes,6,opt,name=templateName,proto3" json:"templateName,omitempty"`
	ModelLabels  []string            `protobuf:"bytes,7,rep,name=modelLabels" json:"modelLabels,omitempty"`
	Field        []*PropertyOrObject `protobuf:"bytes,8,rep,name=field" json:"field,omitempty"`
}

func (m *MetaObject) Reset()                    { *m = MetaObject{} }
func (m *MetaObject) String() string            { return proto.CompactTextString(m) }
func (*MetaObject) ProtoMessage()               {}
func (*MetaObject) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{4} }

func (m *MetaObject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetaObject) GetShowName() string {
	if m != nil {
		return m.ShowName
	}
	return ""
}

func (m *MetaObject) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetaObject) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MetaObject) GetValueStream() string {
	if m != nil {
		return m.ValueStream
	}
	return ""
}

func (m *MetaObject) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *MetaObject) GetModelLabels() []string {
	if m != nil {
		return m.ModelLabels
	}
	return nil
}

func (m *MetaObject) GetField() []*PropertyOrObject {
	if m != nil {
		return m.Field
	}
	return nil
}

func init() {
	proto.RegisterType((*PropertyOrObject)(nil), "model.PropertyOrObject")
	proto.RegisterType((*SpecItem)(nil), "model.SpecItem")
	proto.RegisterType((*PrimitiveTypeSpec)(nil), "model.PrimitiveTypeSpec")
	proto.RegisterType((*MetaProperty)(nil), "model.MetaProperty")
	proto.RegisterType((*MetaObject)(nil), "model.MetaObject")
}
func (m *PropertyOrObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PropertyOrObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Filed != nil {
		nn1, err := m.Filed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *PropertyOrObject_Prop) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Prop != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Prop.Size()))
		n2, err := m.Prop.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *PropertyOrObject_Obj) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Obj != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Obj.Size()))
		n3, err := m.Obj.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *SpecItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Value.Size()))
		n4, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *PrimitiveTypeSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveTypeSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMeta(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetaProperty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaProperty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ShowName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.ShowName)))
		i += copy(dAtA[i:], m.ShowName)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Version))
	}
	if len(m.PrimitiveType) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.PrimitiveType)))
		i += copy(dAtA[i:], m.PrimitiveType)
	}
	if m.PrimitiveTypeSpec != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.PrimitiveTypeSpec.Size()))
		n5, err := m.PrimitiveTypeSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Logged {
		dAtA[i] = 0x38
		i++
		if m.Logged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Persisted {
		dAtA[i] = 0x40
		i++
		if m.Persisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Readonly {
		dAtA[i] = 0x48
		i++
		if m.Readonly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Field) > 0 {
		for _, msg := range m.Field {
			dAtA[i] = 0x52
			i++
			i = encodeVarintMeta(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DefaultValue != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.DefaultValue.Size()))
		n6, err := m.DefaultValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *MetaObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ShowName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.ShowName)))
		i += copy(dAtA[i:], m.ShowName)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Version))
	}
	if len(m.ValueStream) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.ValueStream)))
		i += copy(dAtA[i:], m.ValueStream)
	}
	if len(m.TemplateName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.TemplateName)))
		i += copy(dAtA[i:], m.TemplateName)
	}
	if len(m.ModelLabels) > 0 {
		for _, s := range m.ModelLabels {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Field) > 0 {
		for _, msg := range m.Field {
			dAtA[i] = 0x42
			i++
			i = encodeVarintMeta(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMeta(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PropertyOrObject) Size() (n int) {
	var l int
	_ = l
	if m.Filed != nil {
		n += m.Filed.Size()
	}
	return n
}

func (m *PropertyOrObject_Prop) Size() (n int) {
	var l int
	_ = l
	if m.Prop != nil {
		l = m.Prop.Size()
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}
func (m *PropertyOrObject_Obj) Size() (n int) {
	var l int
	_ = l
	if m.Obj != nil {
		l = m.Obj.Size()
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}
func (m *SpecItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *PrimitiveTypeSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	return n
}

func (m *MetaProperty) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.ShowName)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMeta(uint64(m.Version))
	}
	l = len(m.PrimitiveType)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.PrimitiveTypeSpec != nil {
		l = m.PrimitiveTypeSpec.Size()
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Logged {
		n += 2
	}
	if m.Persisted {
		n += 2
	}
	if m.Readonly {
		n += 2
	}
	if len(m.Field) > 0 {
		for _, e := range m.Field {
			l = e.Size()
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	if m.DefaultValue != nil {
		l = m.DefaultValue.Size()
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *MetaObject) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.ShowName)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMeta(uint64(m.Version))
	}
	l = len(m.ValueStream)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.TemplateName)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if len(m.ModelLabels) > 0 {
		for _, s := range m.ModelLabels {
			l = len(s)
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	if len(m.Field) > 0 {
		for _, e := range m.Field {
			l = e.Size()
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	return n
}

func sovMeta(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMeta(x uint64) (n int) {
	return sovMeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PropertyOrObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PropertyOrObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PropertyOrObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MetaProperty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filed = &PropertyOrObject_Prop{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Obj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MetaObject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Filed = &PropertyOrObject_Obj{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &PrimitiveValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveTypeSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveTypeSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveTypeSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SpecItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaProperty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaProperty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaProperty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimitiveType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveTypeSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrimitiveTypeSpec == nil {
				m.PrimitiveTypeSpec = &PrimitiveTypeSpec{}
			}
			if err := m.PrimitiveTypeSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Logged = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Persisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Persisted = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readonly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Readonly = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field, &PropertyOrObject{})
			if err := m.Field[len(m.Field)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultValue == nil {
				m.DefaultValue = &Value{}
			}
			if err := m.DefaultValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueStream", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueStream = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelLabels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelLabels = append(m.ModelLabels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field, &PropertyOrObject{})
			if err := m.Field[len(m.Field)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMeta
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMeta
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMeta(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMeta = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeta   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("meta.proto", fileDescriptorMeta) }

var fileDescriptorMeta = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0xe3, 0x3c, 0x9c, 0xeb, 0x20, 0x9a, 0x41, 0xc0, 0xa8, 0x42, 0x91, 0x65, 0x51, 0x29,
	0x08, 0x11, 0xa1, 0xb2, 0x63, 0xd9, 0x05, 0x2a, 0xe2, 0xd1, 0xca, 0x45, 0xec, 0x27, 0xf1, 0x6d,
	0x71, 0x35, 0x93, 0x19, 0x8d, 0xa7, 0x41, 0xf9, 0x0a, 0xb6, 0x48, 0xfc, 0x10, 0x4b, 0x3e, 0x01,
	0x85, 0x1f, 0x41, 0x73, 0xed, 0x24, 0x4e, 0x61, 0xc1, 0x8a, 0x9d, 0xef, 0x39, 0xe7, 0x9e, 0xfb,
	0xf2, 0x00, 0x28, 0x74, 0x62, 0x6a, 0xac, 0x76, 0x9a, 0x75, 0x95, 0xce, 0x51, 0x1e, 0xc6, 0x4b,
	0x21, 0x6f, 0xb0, 0xc2, 0x52, 0x05, 0x07, 0xe7, 0x56, 0x1b, 0xb4, 0x6e, 0x75, 0x66, 0xcf, 0x66,
	0xd7, 0x38, 0x77, 0xec, 0x09, 0x74, 0x8c, 0xd5, 0x86, 0x07, 0x49, 0x30, 0x89, 0x8f, 0xef, 0x4d,
	0x29, 0x6d, 0xfa, 0x0e, 0x9d, 0xd8, 0x48, 0x4f, 0x5b, 0x19, 0x49, 0xd8, 0x11, 0x84, 0x7a, 0x76,
	0xcd, 0xdb, 0xa4, 0x1c, 0x35, 0x94, 0x95, 0xd5, 0x69, 0x2b, 0xf3, 0xfc, 0x49, 0x1f, 0xba, 0x97,
	0x85, 0xc4, 0x3c, 0x7d, 0x03, 0xd1, 0x85, 0xc1, 0xf9, 0x6b, 0x87, 0x8a, 0x31, 0xe8, 0x2c, 0x84,
	0x42, 0x2a, 0x33, 0xc8, 0xe8, 0x9b, 0x3d, 0x85, 0x2e, 0x75, 0x57, 0x3b, 0xde, 0xaf, 0x1d, 0xcf,
	0x6d, 0xa1, 0x0a, 0x57, 0x2c, 0xf1, 0xa3, 0x27, 0xb3, 0x4a, 0x93, 0xbe, 0x84, 0xd1, 0x96, 0xf8,
	0xb0, 0x32, 0xe8, 0x9d, 0xd9, 0x11, 0x74, 0x0b, 0x87, 0xaa, 0xe4, 0x41, 0x12, 0x4e, 0xe2, 0xe3,
	0xbb, 0xb5, 0xc3, 0xa6, 0x6a, 0x56, 0xb1, 0xe9, 0xb7, 0x10, 0x86, 0xcd, 0x89, 0xfe, 0xda, 0xcd,
	0x21, 0x44, 0xe5, 0x27, 0xfd, 0xf9, 0xbd, 0xc7, 0xdb, 0x84, 0x6f, 0x63, 0x96, 0x40, 0x9c, 0x63,
	0x39, 0xb7, 0x85, 0x71, 0x85, 0x5e, 0xf0, 0x90, 0xe8, 0x26, 0xc4, 0x38, 0xf4, 0x97, 0x68, 0x4b,
	0xcf, 0x76, 0x92, 0x60, 0x12, 0x66, 0x9b, 0x90, 0x3d, 0x86, 0x3b, 0xa6, 0xd9, 0x38, 0xef, 0x52,
	0xf6, 0x3e, 0xc8, 0x5e, 0xc1, 0xc8, 0xdc, 0x1e, 0x8f, 0xf7, 0x68, 0x2f, 0xfc, 0xf6, 0x5e, 0x36,
	0x7c, 0xf6, 0x67, 0x0a, 0x7b, 0x00, 0x3d, 0xa9, 0xaf, 0xae, 0x30, 0xe7, 0xfd, 0x24, 0x98, 0x44,
	0x59, 0x1d, 0xb1, 0x47, 0x30, 0x30, 0xbe, 0xa1, 0xd2, 0x61, 0xce, 0x23, 0xa2, 0x76, 0x80, 0x9f,
	0xdd, 0xa2, 0xc8, 0xf5, 0x42, 0xae, 0xf8, 0x80, 0xc8, 0x6d, 0xcc, 0x9e, 0xf9, 0x73, 0xa2, 0xcc,
	0x39, 0xd0, 0x8e, 0x1f, 0x6e, 0xbb, 0xd9, 0xff, 0x91, 0xb2, 0x4a, 0xc5, 0x9e, 0xc3, 0x30, 0xc7,
	0x4b, 0x71, 0x23, 0x1d, 0x9d, 0x8f, 0xc7, 0x34, 0xc3, 0xb0, 0xce, 0xaa, 0x4e, 0xba, 0xa7, 0x48,
	0xbf, 0xb4, 0x01, 0x76, 0x7f, 0xd1, 0x7f, 0xbd, 0x4d, 0x02, 0xd5, 0xfb, 0xb8, 0x70, 0x16, 0x85,
	0xaa, 0x2f, 0xd3, 0x84, 0x58, 0x0a, 0x43, 0x87, 0xca, 0x48, 0xe1, 0x90, 0xaa, 0xf7, 0x48, 0xb2,
	0x87, 0x79, 0x17, 0x9a, 0xee, 0xad, 0x98, 0xa1, 0x2c, 0x79, 0x3f, 0x09, 0xbd, 0x4b, 0x03, 0xda,
	0xed, 0x30, 0xfa, 0x97, 0x1d, 0x9e, 0x1c, 0x7c, 0x5f, 0x8f, 0x83, 0x1f, 0xeb, 0x71, 0xf0, 0x73,
	0x3d, 0x0e, 0xbe, 0xfe, 0x1a, 0xb7, 0x66, 0x3d, 0x7a, 0xc0, 0x2f, 0x7e, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x4a, 0x8d, 0xeb, 0x81, 0xe2, 0x03, 0x00, 0x00,
}
