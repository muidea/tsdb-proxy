// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: value.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "google/protobuf"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BinaryValue struct {
	SubType int32  `protobuf:"varint,1,opt,name=subType,proto3" json:"subType,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BinaryValue) Reset()                    { *m = BinaryValue{} }
func (m *BinaryValue) String() string            { return proto.CompactTextString(m) }
func (*BinaryValue) ProtoMessage()               {}
func (*BinaryValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{0} }

func (m *BinaryValue) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *BinaryValue) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type EmptyValue struct {
}

func (m *EmptyValue) Reset()                    { *m = EmptyValue{} }
func (m *EmptyValue) String() string            { return proto.CompactTextString(m) }
func (*EmptyValue) ProtoMessage()               {}
func (*EmptyValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{1} }

type NullValue struct {
}

func (m *NullValue) Reset()                    { *m = NullValue{} }
func (m *NullValue) String() string            { return proto.CompactTextString(m) }
func (*NullValue) ProtoMessage()               {}
func (*NullValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{2} }

type PrimitiveValue struct {
	// Types that are valid to be assigned to Value:
	//	*PrimitiveValue_I32Value
	//	*PrimitiveValue_FltValue
	//	*PrimitiveValue_DblValue
	//	*PrimitiveValue_BoolValue
	//	*PrimitiveValue_StrValue
	//	*PrimitiveValue_I64Value
	//	*PrimitiveValue_Ui32Value
	//	*PrimitiveValue_Ui64Value
	//	*PrimitiveValue_BinValue
	//	*PrimitiveValue_EmptyValue
	//	*PrimitiveValue_NullValue
	Value isPrimitiveValue_Value `protobuf_oneof:"value"`
}

func (m *PrimitiveValue) Reset()                    { *m = PrimitiveValue{} }
func (m *PrimitiveValue) String() string            { return proto.CompactTextString(m) }
func (*PrimitiveValue) ProtoMessage()               {}
func (*PrimitiveValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{3} }

type isPrimitiveValue_Value interface {
	isPrimitiveValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrimitiveValue_I32Value struct {
	I32Value int32 `protobuf:"varint,1,opt,name=i32Value,proto3,oneof"`
}
type PrimitiveValue_FltValue struct {
	FltValue float32 `protobuf:"fixed32,2,opt,name=fltValue,proto3,oneof"`
}
type PrimitiveValue_DblValue struct {
	DblValue float64 `protobuf:"fixed64,3,opt,name=dblValue,proto3,oneof"`
}
type PrimitiveValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=boolValue,proto3,oneof"`
}
type PrimitiveValue_StrValue struct {
	StrValue string `protobuf:"bytes,5,opt,name=strValue,proto3,oneof"`
}
type PrimitiveValue_I64Value struct {
	I64Value int64 `protobuf:"varint,6,opt,name=i64Value,proto3,oneof"`
}
type PrimitiveValue_Ui32Value struct {
	Ui32Value uint32 `protobuf:"varint,7,opt,name=ui32Value,proto3,oneof"`
}
type PrimitiveValue_Ui64Value struct {
	Ui64Value uint64 `protobuf:"varint,8,opt,name=ui64Value,proto3,oneof"`
}
type PrimitiveValue_BinValue struct {
	BinValue *BinaryValue `protobuf:"bytes,9,opt,name=binValue,oneof"`
}
type PrimitiveValue_EmptyValue struct {
	EmptyValue *EmptyValue `protobuf:"bytes,241,opt,name=emptyValue,oneof"`
}
type PrimitiveValue_NullValue struct {
	NullValue *NullValue `protobuf:"bytes,242,opt,name=nullValue,oneof"`
}

func (*PrimitiveValue_I32Value) isPrimitiveValue_Value()   {}
func (*PrimitiveValue_FltValue) isPrimitiveValue_Value()   {}
func (*PrimitiveValue_DblValue) isPrimitiveValue_Value()   {}
func (*PrimitiveValue_BoolValue) isPrimitiveValue_Value()  {}
func (*PrimitiveValue_StrValue) isPrimitiveValue_Value()   {}
func (*PrimitiveValue_I64Value) isPrimitiveValue_Value()   {}
func (*PrimitiveValue_Ui32Value) isPrimitiveValue_Value()  {}
func (*PrimitiveValue_Ui64Value) isPrimitiveValue_Value()  {}
func (*PrimitiveValue_BinValue) isPrimitiveValue_Value()   {}
func (*PrimitiveValue_EmptyValue) isPrimitiveValue_Value() {}
func (*PrimitiveValue_NullValue) isPrimitiveValue_Value()  {}

func (m *PrimitiveValue) GetValue() isPrimitiveValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PrimitiveValue) GetI32Value() int32 {
	if x, ok := m.GetValue().(*PrimitiveValue_I32Value); ok {
		return x.I32Value
	}
	return 0
}

func (m *PrimitiveValue) GetFltValue() float32 {
	if x, ok := m.GetValue().(*PrimitiveValue_FltValue); ok {
		return x.FltValue
	}
	return 0
}

func (m *PrimitiveValue) GetDblValue() float64 {
	if x, ok := m.GetValue().(*PrimitiveValue_DblValue); ok {
		return x.DblValue
	}
	return 0
}

func (m *PrimitiveValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*PrimitiveValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *PrimitiveValue) GetStrValue() string {
	if x, ok := m.GetValue().(*PrimitiveValue_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (m *PrimitiveValue) GetI64Value() int64 {
	if x, ok := m.GetValue().(*PrimitiveValue_I64Value); ok {
		return x.I64Value
	}
	return 0
}

func (m *PrimitiveValue) GetUi32Value() uint32 {
	if x, ok := m.GetValue().(*PrimitiveValue_Ui32Value); ok {
		return x.Ui32Value
	}
	return 0
}

func (m *PrimitiveValue) GetUi64Value() uint64 {
	if x, ok := m.GetValue().(*PrimitiveValue_Ui64Value); ok {
		return x.Ui64Value
	}
	return 0
}

func (m *PrimitiveValue) GetBinValue() *BinaryValue {
	if x, ok := m.GetValue().(*PrimitiveValue_BinValue); ok {
		return x.BinValue
	}
	return nil
}

func (m *PrimitiveValue) GetEmptyValue() *EmptyValue {
	if x, ok := m.GetValue().(*PrimitiveValue_EmptyValue); ok {
		return x.EmptyValue
	}
	return nil
}

func (m *PrimitiveValue) GetNullValue() *NullValue {
	if x, ok := m.GetValue().(*PrimitiveValue_NullValue); ok {
		return x.NullValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PrimitiveValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PrimitiveValue_OneofMarshaler, _PrimitiveValue_OneofUnmarshaler, _PrimitiveValue_OneofSizer, []interface{}{
		(*PrimitiveValue_I32Value)(nil),
		(*PrimitiveValue_FltValue)(nil),
		(*PrimitiveValue_DblValue)(nil),
		(*PrimitiveValue_BoolValue)(nil),
		(*PrimitiveValue_StrValue)(nil),
		(*PrimitiveValue_I64Value)(nil),
		(*PrimitiveValue_Ui32Value)(nil),
		(*PrimitiveValue_Ui64Value)(nil),
		(*PrimitiveValue_BinValue)(nil),
		(*PrimitiveValue_EmptyValue)(nil),
		(*PrimitiveValue_NullValue)(nil),
	}
}

func _PrimitiveValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PrimitiveValue)
	// value
	switch x := m.Value.(type) {
	case *PrimitiveValue_I32Value:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.I32Value))
	case *PrimitiveValue_FltValue:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.FltValue)))
	case *PrimitiveValue_DblValue:
		_ = b.EncodeVarint(3<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.DblValue))
	case *PrimitiveValue_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *PrimitiveValue_StrValue:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StrValue)
	case *PrimitiveValue_I64Value:
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.I64Value))
	case *PrimitiveValue_Ui32Value:
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Ui32Value))
	case *PrimitiveValue_Ui64Value:
		_ = b.EncodeVarint(8<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Ui64Value))
	case *PrimitiveValue_BinValue:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BinValue); err != nil {
			return err
		}
	case *PrimitiveValue_EmptyValue:
		_ = b.EncodeVarint(241<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EmptyValue); err != nil {
			return err
		}
	case *PrimitiveValue_NullValue:
		_ = b.EncodeVarint(242<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NullValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PrimitiveValue.Value has unexpected type %T", x)
	}
	return nil
}

func _PrimitiveValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PrimitiveValue)
	switch tag {
	case 1: // value.i32Value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &PrimitiveValue_I32Value{int32(x)}
		return true, err
	case 2: // value.fltValue
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &PrimitiveValue_FltValue{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // value.dblValue
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &PrimitiveValue_DblValue{math.Float64frombits(x)}
		return true, err
	case 4: // value.boolValue
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &PrimitiveValue_BoolValue{x != 0}
		return true, err
	case 5: // value.strValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &PrimitiveValue_StrValue{x}
		return true, err
	case 6: // value.i64Value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &PrimitiveValue_I64Value{int64(x)}
		return true, err
	case 7: // value.ui32Value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &PrimitiveValue_Ui32Value{uint32(x)}
		return true, err
	case 8: // value.ui64Value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &PrimitiveValue_Ui64Value{x}
		return true, err
	case 9: // value.binValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BinaryValue)
		err := b.DecodeMessage(msg)
		m.Value = &PrimitiveValue_BinValue{msg}
		return true, err
	case 241: // value.emptyValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmptyValue)
		err := b.DecodeMessage(msg)
		m.Value = &PrimitiveValue_EmptyValue{msg}
		return true, err
	case 242: // value.nullValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NullValue)
		err := b.DecodeMessage(msg)
		m.Value = &PrimitiveValue_NullValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PrimitiveValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PrimitiveValue)
	// value
	switch x := m.Value.(type) {
	case *PrimitiveValue_I32Value:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.I32Value))
	case *PrimitiveValue_FltValue:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *PrimitiveValue_DblValue:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *PrimitiveValue_BoolValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *PrimitiveValue_StrValue:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StrValue)))
		n += len(x.StrValue)
	case *PrimitiveValue_I64Value:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.I64Value))
	case *PrimitiveValue_Ui32Value:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Ui32Value))
	case *PrimitiveValue_Ui64Value:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Ui64Value))
	case *PrimitiveValue_BinValue:
		s := proto.Size(x.BinValue)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PrimitiveValue_EmptyValue:
		s := proto.Size(x.EmptyValue)
		n += proto.SizeVarint(241<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PrimitiveValue_NullValue:
		s := proto.Size(x.NullValue)
		n += proto.SizeVarint(242<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PrimitiveValueWithQT struct {
	Time    uint64          `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Quality uint64          `protobuf:"varint,2,opt,name=quality,proto3" json:"quality,omitempty"`
	Status  uint64          `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Value   *PrimitiveValue `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *PrimitiveValueWithQT) Reset()                    { *m = PrimitiveValueWithQT{} }
func (m *PrimitiveValueWithQT) String() string            { return proto.CompactTextString(m) }
func (*PrimitiveValueWithQT) ProtoMessage()               {}
func (*PrimitiveValueWithQT) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{4} }

func (m *PrimitiveValueWithQT) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PrimitiveValueWithQT) GetQuality() uint64 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *PrimitiveValueWithQT) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PrimitiveValueWithQT) GetValue() *PrimitiveValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type ArrayItemValue struct {
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ArrayItemValue_PrimitiveValue
	//	*ArrayItemValue_StructValue
	Value isArrayItemValue_Value `protobuf_oneof:"value"`
}

func (m *ArrayItemValue) Reset()                    { *m = ArrayItemValue{} }
func (m *ArrayItemValue) String() string            { return proto.CompactTextString(m) }
func (*ArrayItemValue) ProtoMessage()               {}
func (*ArrayItemValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{5} }

type isArrayItemValue_Value interface {
	isArrayItemValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ArrayItemValue_PrimitiveValue struct {
	PrimitiveValue *PrimitiveValueWithQT `protobuf:"bytes,2,opt,name=primitiveValue,oneof"`
}
type ArrayItemValue_StructValue struct {
	StructValue *ValueSequnce `protobuf:"bytes,3,opt,name=structValue,oneof"`
}

func (*ArrayItemValue_PrimitiveValue) isArrayItemValue_Value() {}
func (*ArrayItemValue_StructValue) isArrayItemValue_Value()    {}

func (m *ArrayItemValue) GetValue() isArrayItemValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ArrayItemValue) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ArrayItemValue) GetPrimitiveValue() *PrimitiveValueWithQT {
	if x, ok := m.GetValue().(*ArrayItemValue_PrimitiveValue); ok {
		return x.PrimitiveValue
	}
	return nil
}

func (m *ArrayItemValue) GetStructValue() *ValueSequnce {
	if x, ok := m.GetValue().(*ArrayItemValue_StructValue); ok {
		return x.StructValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ArrayItemValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ArrayItemValue_OneofMarshaler, _ArrayItemValue_OneofUnmarshaler, _ArrayItemValue_OneofSizer, []interface{}{
		(*ArrayItemValue_PrimitiveValue)(nil),
		(*ArrayItemValue_StructValue)(nil),
	}
}

func _ArrayItemValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ArrayItemValue)
	// value
	switch x := m.Value.(type) {
	case *ArrayItemValue_PrimitiveValue:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrimitiveValue); err != nil {
			return err
		}
	case *ArrayItemValue_StructValue:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ArrayItemValue.Value has unexpected type %T", x)
	}
	return nil
}

func _ArrayItemValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ArrayItemValue)
	switch tag {
	case 2: // value.primitiveValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrimitiveValueWithQT)
		err := b.DecodeMessage(msg)
		m.Value = &ArrayItemValue_PrimitiveValue{msg}
		return true, err
	case 3: // value.structValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ValueSequnce)
		err := b.DecodeMessage(msg)
		m.Value = &ArrayItemValue_StructValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ArrayItemValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ArrayItemValue)
	// value
	switch x := m.Value.(type) {
	case *ArrayItemValue_PrimitiveValue:
		s := proto.Size(x.PrimitiveValue)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ArrayItemValue_StructValue:
		s := proto.Size(x.StructValue)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ArrayValue struct {
	Value []*ArrayItemValue `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *ArrayValue) Reset()                    { *m = ArrayValue{} }
func (m *ArrayValue) String() string            { return proto.CompactTextString(m) }
func (*ArrayValue) ProtoMessage()               {}
func (*ArrayValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{6} }

func (m *ArrayValue) GetValue() []*ArrayItemValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type ColumnItemValue struct {
	ColumnName string          `protobuf:"bytes,1,opt,name=columnName,proto3" json:"columnName,omitempty"`
	Value      *PrimitiveValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ColumnItemValue) Reset()                    { *m = ColumnItemValue{} }
func (m *ColumnItemValue) String() string            { return proto.CompactTextString(m) }
func (*ColumnItemValue) ProtoMessage()               {}
func (*ColumnItemValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{7} }

func (m *ColumnItemValue) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ColumnItemValue) GetValue() *PrimitiveValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type RowValue struct {
	Value []*ColumnItemValue `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *RowValue) Reset()                    { *m = RowValue{} }
func (m *RowValue) String() string            { return proto.CompactTextString(m) }
func (*RowValue) ProtoMessage()               {}
func (*RowValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{8} }

func (m *RowValue) GetValue() []*ColumnItemValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type KeyValue struct {
	// Types that are valid to be assigned to Value:
	//	*KeyValue_I32Value
	//	*KeyValue_StrValue
	//	*KeyValue_I64Value
	//	*KeyValue_Ui32Value
	//	*KeyValue_Ui64Value
	Value isKeyValue_Value `protobuf_oneof:"value"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{9} }

type isKeyValue_Value interface {
	isKeyValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type KeyValue_I32Value struct {
	I32Value int32 `protobuf:"varint,1,opt,name=i32Value,proto3,oneof"`
}
type KeyValue_StrValue struct {
	StrValue string `protobuf:"bytes,2,opt,name=strValue,proto3,oneof"`
}
type KeyValue_I64Value struct {
	I64Value int64 `protobuf:"varint,3,opt,name=i64Value,proto3,oneof"`
}
type KeyValue_Ui32Value struct {
	Ui32Value uint32 `protobuf:"varint,4,opt,name=ui32Value,proto3,oneof"`
}
type KeyValue_Ui64Value struct {
	Ui64Value uint64 `protobuf:"varint,5,opt,name=ui64Value,proto3,oneof"`
}

func (*KeyValue_I32Value) isKeyValue_Value()  {}
func (*KeyValue_StrValue) isKeyValue_Value()  {}
func (*KeyValue_I64Value) isKeyValue_Value()  {}
func (*KeyValue_Ui32Value) isKeyValue_Value() {}
func (*KeyValue_Ui64Value) isKeyValue_Value() {}

func (m *KeyValue) GetValue() isKeyValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KeyValue) GetI32Value() int32 {
	if x, ok := m.GetValue().(*KeyValue_I32Value); ok {
		return x.I32Value
	}
	return 0
}

func (m *KeyValue) GetStrValue() string {
	if x, ok := m.GetValue().(*KeyValue_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (m *KeyValue) GetI64Value() int64 {
	if x, ok := m.GetValue().(*KeyValue_I64Value); ok {
		return x.I64Value
	}
	return 0
}

func (m *KeyValue) GetUi32Value() uint32 {
	if x, ok := m.GetValue().(*KeyValue_Ui32Value); ok {
		return x.Ui32Value
	}
	return 0
}

func (m *KeyValue) GetUi64Value() uint64 {
	if x, ok := m.GetValue().(*KeyValue_Ui64Value); ok {
		return x.Ui64Value
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KeyValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KeyValue_OneofMarshaler, _KeyValue_OneofUnmarshaler, _KeyValue_OneofSizer, []interface{}{
		(*KeyValue_I32Value)(nil),
		(*KeyValue_StrValue)(nil),
		(*KeyValue_I64Value)(nil),
		(*KeyValue_Ui32Value)(nil),
		(*KeyValue_Ui64Value)(nil),
	}
}

func _KeyValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KeyValue)
	// value
	switch x := m.Value.(type) {
	case *KeyValue_I32Value:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.I32Value))
	case *KeyValue_StrValue:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StrValue)
	case *KeyValue_I64Value:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.I64Value))
	case *KeyValue_Ui32Value:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Ui32Value))
	case *KeyValue_Ui64Value:
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Ui64Value))
	case nil:
	default:
		return fmt.Errorf("KeyValue.Value has unexpected type %T", x)
	}
	return nil
}

func _KeyValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KeyValue)
	switch tag {
	case 1: // value.i32Value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &KeyValue_I32Value{int32(x)}
		return true, err
	case 2: // value.strValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &KeyValue_StrValue{x}
		return true, err
	case 3: // value.i64Value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &KeyValue_I64Value{int64(x)}
		return true, err
	case 4: // value.ui32Value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &KeyValue_Ui32Value{uint32(x)}
		return true, err
	case 5: // value.ui64Value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &KeyValue_Ui64Value{x}
		return true, err
	default:
		return false, nil
	}
}

func _KeyValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KeyValue)
	// value
	switch x := m.Value.(type) {
	case *KeyValue_I32Value:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.I32Value))
	case *KeyValue_StrValue:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StrValue)))
		n += len(x.StrValue)
	case *KeyValue_I64Value:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.I64Value))
	case *KeyValue_Ui32Value:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Ui32Value))
	case *KeyValue_Ui64Value:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Ui64Value))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UpdateValue struct {
	Key   *KeyValue `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *RowValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *UpdateValue) Reset()                    { *m = UpdateValue{} }
func (m *UpdateValue) String() string            { return proto.CompactTextString(m) }
func (*UpdateValue) ProtoMessage()               {}
func (*UpdateValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{10} }

func (m *UpdateValue) GetKey() *KeyValue {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *UpdateValue) GetValue() *RowValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type TrunkTableValue struct {
	Value []*RowValue `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *TrunkTableValue) Reset()                    { *m = TrunkTableValue{} }
func (m *TrunkTableValue) String() string            { return proto.CompactTextString(m) }
func (*TrunkTableValue) ProtoMessage()               {}
func (*TrunkTableValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{11} }

func (m *TrunkTableValue) GetValue() []*RowValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type RefreshTableValue struct {
	InsertValue []*RowValue    `protobuf:"bytes,1,rep,name=insertValue" json:"insertValue,omitempty"`
	UpdateValue []*UpdateValue `protobuf:"bytes,2,rep,name=updateValue" json:"updateValue,omitempty"`
	DeleteValue []*KeyValue    `protobuf:"bytes,3,rep,name=deleteValue" json:"deleteValue,omitempty"`
}

func (m *RefreshTableValue) Reset()                    { *m = RefreshTableValue{} }
func (m *RefreshTableValue) String() string            { return proto.CompactTextString(m) }
func (*RefreshTableValue) ProtoMessage()               {}
func (*RefreshTableValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{12} }

func (m *RefreshTableValue) GetInsertValue() []*RowValue {
	if m != nil {
		return m.InsertValue
	}
	return nil
}

func (m *RefreshTableValue) GetUpdateValue() []*UpdateValue {
	if m != nil {
		return m.UpdateValue
	}
	return nil
}

func (m *RefreshTableValue) GetDeleteValue() []*KeyValue {
	if m != nil {
		return m.DeleteValue
	}
	return nil
}

type TableValue struct {
	// Types that are valid to be assigned to Value:
	//	*TableValue_TrunkValue
	//	*TableValue_RefreshValue
	Value isTableValue_Value `protobuf_oneof:"value"`
}

func (m *TableValue) Reset()                    { *m = TableValue{} }
func (m *TableValue) String() string            { return proto.CompactTextString(m) }
func (*TableValue) ProtoMessage()               {}
func (*TableValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{13} }

type isTableValue_Value interface {
	isTableValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TableValue_TrunkValue struct {
	TrunkValue *TrunkTableValue `protobuf:"bytes,1,opt,name=trunkValue,oneof"`
}
type TableValue_RefreshValue struct {
	RefreshValue *RefreshTableValue `protobuf:"bytes,2,opt,name=refreshValue,oneof"`
}

func (*TableValue_TrunkValue) isTableValue_Value()   {}
func (*TableValue_RefreshValue) isTableValue_Value() {}

func (m *TableValue) GetValue() isTableValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TableValue) GetTrunkValue() *TrunkTableValue {
	if x, ok := m.GetValue().(*TableValue_TrunkValue); ok {
		return x.TrunkValue
	}
	return nil
}

func (m *TableValue) GetRefreshValue() *RefreshTableValue {
	if x, ok := m.GetValue().(*TableValue_RefreshValue); ok {
		return x.RefreshValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TableValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TableValue_OneofMarshaler, _TableValue_OneofUnmarshaler, _TableValue_OneofSizer, []interface{}{
		(*TableValue_TrunkValue)(nil),
		(*TableValue_RefreshValue)(nil),
	}
}

func _TableValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TableValue)
	// value
	switch x := m.Value.(type) {
	case *TableValue_TrunkValue:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TrunkValue); err != nil {
			return err
		}
	case *TableValue_RefreshValue:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RefreshValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TableValue.Value has unexpected type %T", x)
	}
	return nil
}

func _TableValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TableValue)
	switch tag {
	case 1: // value.trunkValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TrunkTableValue)
		err := b.DecodeMessage(msg)
		m.Value = &TableValue_TrunkValue{msg}
		return true, err
	case 2: // value.refreshValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RefreshTableValue)
		err := b.DecodeMessage(msg)
		m.Value = &TableValue_RefreshValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TableValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TableValue)
	// value
	switch x := m.Value.(type) {
	case *TableValue_TrunkValue:
		s := proto.Size(x.TrunkValue)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableValue_RefreshValue:
		s := proto.Size(x.RefreshValue)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Value struct {
	// Types that are valid to be assigned to Kind:
	//	*Value_PrimitiveValue
	//	*Value_PrimitiveValueWithQT
	//	*Value_StructValue
	//	*Value_ArrayValue
	//	*Value_TableValue
	Kind isValue_Kind `protobuf_oneof:"kind"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{14} }

type isValue_Kind interface {
	isValue_Kind()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Value_PrimitiveValue struct {
	PrimitiveValue *PrimitiveValue `protobuf:"bytes,1,opt,name=primitiveValue,oneof"`
}
type Value_PrimitiveValueWithQT struct {
	PrimitiveValueWithQT *PrimitiveValueWithQT `protobuf:"bytes,2,opt,name=primitiveValueWithQT,oneof"`
}
type Value_StructValue struct {
	StructValue *ValueSequnce `protobuf:"bytes,3,opt,name=structValue,oneof"`
}
type Value_ArrayValue struct {
	ArrayValue *ArrayValue `protobuf:"bytes,4,opt,name=arrayValue,oneof"`
}
type Value_TableValue struct {
	TableValue *TableValue `protobuf:"bytes,5,opt,name=tableValue,oneof"`
}

func (*Value_PrimitiveValue) isValue_Kind()       {}
func (*Value_PrimitiveValueWithQT) isValue_Kind() {}
func (*Value_StructValue) isValue_Kind()          {}
func (*Value_ArrayValue) isValue_Kind()           {}
func (*Value_TableValue) isValue_Kind()           {}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Value) GetPrimitiveValue() *PrimitiveValue {
	if x, ok := m.GetKind().(*Value_PrimitiveValue); ok {
		return x.PrimitiveValue
	}
	return nil
}

func (m *Value) GetPrimitiveValueWithQT() *PrimitiveValueWithQT {
	if x, ok := m.GetKind().(*Value_PrimitiveValueWithQT); ok {
		return x.PrimitiveValueWithQT
	}
	return nil
}

func (m *Value) GetStructValue() *ValueSequnce {
	if x, ok := m.GetKind().(*Value_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (m *Value) GetArrayValue() *ArrayValue {
	if x, ok := m.GetKind().(*Value_ArrayValue); ok {
		return x.ArrayValue
	}
	return nil
}

func (m *Value) GetTableValue() *TableValue {
	if x, ok := m.GetKind().(*Value_TableValue); ok {
		return x.TableValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_PrimitiveValue)(nil),
		(*Value_PrimitiveValueWithQT)(nil),
		(*Value_StructValue)(nil),
		(*Value_ArrayValue)(nil),
		(*Value_TableValue)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// kind
	switch x := m.Kind.(type) {
	case *Value_PrimitiveValue:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrimitiveValue); err != nil {
			return err
		}
	case *Value_PrimitiveValueWithQT:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrimitiveValueWithQT); err != nil {
			return err
		}
	case *Value_StructValue:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructValue); err != nil {
			return err
		}
	case *Value_ArrayValue:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArrayValue); err != nil {
			return err
		}
	case *Value_TableValue:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TableValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Value.Kind has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // kind.primitiveValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrimitiveValue)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_PrimitiveValue{msg}
		return true, err
	case 2: // kind.primitiveValueWithQT
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrimitiveValueWithQT)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_PrimitiveValueWithQT{msg}
		return true, err
	case 3: // kind.structValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ValueSequnce)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_StructValue{msg}
		return true, err
	case 4: // kind.arrayValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ArrayValue)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_ArrayValue{msg}
		return true, err
	case 5: // kind.tableValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableValue)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_TableValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// kind
	switch x := m.Kind.(type) {
	case *Value_PrimitiveValue:
		s := proto.Size(x.PrimitiveValue)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_PrimitiveValueWithQT:
		s := proto.Size(x.PrimitiveValueWithQT)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_StructValue:
		s := proto.Size(x.StructValue)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_ArrayValue:
		s := proto.Size(x.ArrayValue)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_TableValue:
		s := proto.Size(x.TableValue)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NamedValue struct {
	Name  string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Value                     `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Tags  []*google_protobuf2.Option `protobuf:"bytes,100,rep,name=tags" json:"tags,omitempty"`
}

func (m *NamedValue) Reset()                    { *m = NamedValue{} }
func (m *NamedValue) String() string            { return proto.CompactTextString(m) }
func (*NamedValue) ProtoMessage()               {}
func (*NamedValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{15} }

func (m *NamedValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NamedValue) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *NamedValue) GetTags() []*google_protobuf2.Option {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ValueSequnce struct {
	Value   []*NamedValue              `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Options []*google_protobuf2.Option `protobuf:"bytes,100,rep,name=options" json:"options,omitempty"`
}

func (m *ValueSequnce) Reset()                    { *m = ValueSequnce{} }
func (m *ValueSequnce) String() string            { return proto.CompactTextString(m) }
func (*ValueSequnce) ProtoMessage()               {}
func (*ValueSequnce) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{16} }

func (m *ValueSequnce) GetValue() []*NamedValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ValueSequnce) GetOptions() []*google_protobuf2.Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type RtdValues struct {
	TimeStamp uint64        `protobuf:"varint,1,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Values    *ValueSequnce `protobuf:"bytes,2,opt,name=values" json:"values,omitempty"`
}

func (m *RtdValues) Reset()                    { *m = RtdValues{} }
func (m *RtdValues) String() string            { return proto.CompactTextString(m) }
func (*RtdValues) ProtoMessage()               {}
func (*RtdValues) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{17} }

func (m *RtdValues) GetTimeStamp() uint64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *RtdValues) GetValues() *ValueSequnce {
	if m != nil {
		return m.Values
	}
	return nil
}

type RtdValue struct {
	TimeStamp uint64      `protobuf:"varint,1,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Value     *NamedValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *RtdValue) Reset()                    { *m = RtdValue{} }
func (m *RtdValue) String() string            { return proto.CompactTextString(m) }
func (*RtdValue) ProtoMessage()               {}
func (*RtdValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{18} }

func (m *RtdValue) GetTimeStamp() uint64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *RtdValue) GetValue() *NamedValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*BinaryValue)(nil), "model.BinaryValue")
	proto.RegisterType((*EmptyValue)(nil), "model.EmptyValue")
	proto.RegisterType((*NullValue)(nil), "model.NullValue")
	proto.RegisterType((*PrimitiveValue)(nil), "model.PrimitiveValue")
	proto.RegisterType((*PrimitiveValueWithQT)(nil), "model.PrimitiveValueWithQT")
	proto.RegisterType((*ArrayItemValue)(nil), "model.ArrayItemValue")
	proto.RegisterType((*ArrayValue)(nil), "model.ArrayValue")
	proto.RegisterType((*ColumnItemValue)(nil), "model.ColumnItemValue")
	proto.RegisterType((*RowValue)(nil), "model.RowValue")
	proto.RegisterType((*KeyValue)(nil), "model.KeyValue")
	proto.RegisterType((*UpdateValue)(nil), "model.UpdateValue")
	proto.RegisterType((*TrunkTableValue)(nil), "model.TrunkTableValue")
	proto.RegisterType((*RefreshTableValue)(nil), "model.RefreshTableValue")
	proto.RegisterType((*TableValue)(nil), "model.TableValue")
	proto.RegisterType((*Value)(nil), "model.Value")
	proto.RegisterType((*NamedValue)(nil), "model.NamedValue")
	proto.RegisterType((*ValueSequnce)(nil), "model.ValueSequnce")
	proto.RegisterType((*RtdValues)(nil), "model.RtdValues")
	proto.RegisterType((*RtdValue)(nil), "model.RtdValue")
}
func (m *BinaryValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.SubType))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *EmptyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NullValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PrimitiveValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *PrimitiveValue_I32Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintValue(dAtA, i, uint64(m.I32Value))
	return i, nil
}
func (m *PrimitiveValue_FltValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x15
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FltValue))))
	i += 4
	return i, nil
}
func (m *PrimitiveValue_DblValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x19
	i++
	binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DblValue))))
	i += 8
	return i, nil
}
func (m *PrimitiveValue_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *PrimitiveValue_StrValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintValue(dAtA, i, uint64(len(m.StrValue)))
	i += copy(dAtA[i:], m.StrValue)
	return i, nil
}
func (m *PrimitiveValue_I64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x30
	i++
	i = encodeVarintValue(dAtA, i, uint64(m.I64Value))
	return i, nil
}
func (m *PrimitiveValue_Ui32Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x38
	i++
	i = encodeVarintValue(dAtA, i, uint64(m.Ui32Value))
	return i, nil
}
func (m *PrimitiveValue_Ui64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x40
	i++
	i = encodeVarintValue(dAtA, i, uint64(m.Ui64Value))
	return i, nil
}
func (m *PrimitiveValue_BinValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BinValue != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.BinValue.Size()))
		n2, err := m.BinValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *PrimitiveValue_EmptyValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EmptyValue != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.EmptyValue.Size()))
		n3, err := m.EmptyValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *PrimitiveValue_NullValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NullValue != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0xf
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.NullValue.Size()))
		n4, err := m.NullValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *PrimitiveValueWithQT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveValueWithQT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Time))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Quality))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Status))
	}
	if m.Value != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Value.Size()))
		n5, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ArrayItemValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArrayItemValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Index))
	}
	if m.Value != nil {
		nn6, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *ArrayItemValue_PrimitiveValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrimitiveValue != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.PrimitiveValue.Size()))
		n7, err := m.PrimitiveValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ArrayItemValue_StructValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StructValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.StructValue.Size()))
		n8, err := m.StructValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *ArrayValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArrayValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, msg := range m.Value {
			dAtA[i] = 0xa
			i++
			i = encodeVarintValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ColumnItemValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnItemValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ColumnName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValue(dAtA, i, uint64(len(m.ColumnName)))
		i += copy(dAtA[i:], m.ColumnName)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Value.Size()))
		n9, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *RowValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, msg := range m.Value {
			dAtA[i] = 0xa
			i++
			i = encodeVarintValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn10, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	return i, nil
}

func (m *KeyValue_I32Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintValue(dAtA, i, uint64(m.I32Value))
	return i, nil
}
func (m *KeyValue_StrValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintValue(dAtA, i, uint64(len(m.StrValue)))
	i += copy(dAtA[i:], m.StrValue)
	return i, nil
}
func (m *KeyValue_I64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintValue(dAtA, i, uint64(m.I64Value))
	return i, nil
}
func (m *KeyValue_Ui32Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintValue(dAtA, i, uint64(m.Ui32Value))
	return i, nil
}
func (m *KeyValue_Ui64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	i = encodeVarintValue(dAtA, i, uint64(m.Ui64Value))
	return i, nil
}
func (m *UpdateValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Key.Size()))
		n11, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Value.Size()))
		n12, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *TrunkTableValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrunkTableValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, msg := range m.Value {
			dAtA[i] = 0xa
			i++
			i = encodeVarintValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RefreshTableValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshTableValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InsertValue) > 0 {
		for _, msg := range m.InsertValue {
			dAtA[i] = 0xa
			i++
			i = encodeVarintValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UpdateValue) > 0 {
		for _, msg := range m.UpdateValue {
			dAtA[i] = 0x12
			i++
			i = encodeVarintValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DeleteValue) > 0 {
		for _, msg := range m.DeleteValue {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TableValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn13, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	return i, nil
}

func (m *TableValue_TrunkValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TrunkValue != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.TrunkValue.Size()))
		n14, err := m.TrunkValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *TableValue_RefreshValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RefreshValue != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.RefreshValue.Size()))
		n15, err := m.RefreshValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != nil {
		nn16, err := m.Kind.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn16
	}
	return i, nil
}

func (m *Value_PrimitiveValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrimitiveValue != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.PrimitiveValue.Size()))
		n17, err := m.PrimitiveValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Value_PrimitiveValueWithQT) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PrimitiveValueWithQT != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.PrimitiveValueWithQT.Size()))
		n18, err := m.PrimitiveValueWithQT.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Value_StructValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StructValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.StructValue.Size()))
		n19, err := m.StructValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Value_ArrayValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ArrayValue != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.ArrayValue.Size()))
		n20, err := m.ArrayValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *Value_TableValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TableValue != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.TableValue.Size()))
		n21, err := m.TableValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *NamedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamedValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValue(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Value.Size()))
		n22, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ValueSequnce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueSequnce) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, msg := range m.Value {
			dAtA[i] = 0xa
			i++
			i = encodeVarintValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Options) > 0 {
		for _, msg := range m.Options {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintValue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RtdValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RtdValues) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimeStamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.TimeStamp))
	}
	if m.Values != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Values.Size()))
		n23, err := m.Values.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *RtdValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RtdValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimeStamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.TimeStamp))
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Value.Size()))
		n24, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func encodeVarintValue(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BinaryValue) Size() (n int) {
	var l int
	_ = l
	if m.SubType != 0 {
		n += 1 + sovValue(uint64(m.SubType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}

func (m *EmptyValue) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NullValue) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PrimitiveValue) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *PrimitiveValue_I32Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovValue(uint64(m.I32Value))
	return n
}
func (m *PrimitiveValue_FltValue) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PrimitiveValue_DblValue) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *PrimitiveValue_BoolValue) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *PrimitiveValue_StrValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.StrValue)
	n += 1 + l + sovValue(uint64(l))
	return n
}
func (m *PrimitiveValue_I64Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovValue(uint64(m.I64Value))
	return n
}
func (m *PrimitiveValue_Ui32Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovValue(uint64(m.Ui32Value))
	return n
}
func (m *PrimitiveValue_Ui64Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovValue(uint64(m.Ui64Value))
	return n
}
func (m *PrimitiveValue_BinValue) Size() (n int) {
	var l int
	_ = l
	if m.BinValue != nil {
		l = m.BinValue.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *PrimitiveValue_EmptyValue) Size() (n int) {
	var l int
	_ = l
	if m.EmptyValue != nil {
		l = m.EmptyValue.Size()
		n += 2 + l + sovValue(uint64(l))
	}
	return n
}
func (m *PrimitiveValue_NullValue) Size() (n int) {
	var l int
	_ = l
	if m.NullValue != nil {
		l = m.NullValue.Size()
		n += 2 + l + sovValue(uint64(l))
	}
	return n
}
func (m *PrimitiveValueWithQT) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovValue(uint64(m.Time))
	}
	if m.Quality != 0 {
		n += 1 + sovValue(uint64(m.Quality))
	}
	if m.Status != 0 {
		n += 1 + sovValue(uint64(m.Status))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}

func (m *ArrayItemValue) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovValue(uint64(m.Index))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *ArrayItemValue_PrimitiveValue) Size() (n int) {
	var l int
	_ = l
	if m.PrimitiveValue != nil {
		l = m.PrimitiveValue.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *ArrayItemValue_StructValue) Size() (n int) {
	var l int
	_ = l
	if m.StructValue != nil {
		l = m.StructValue.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *ArrayValue) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovValue(uint64(l))
		}
	}
	return n
}

func (m *ColumnItemValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.ColumnName)
	if l > 0 {
		n += 1 + l + sovValue(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}

func (m *RowValue) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovValue(uint64(l))
		}
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *KeyValue_I32Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovValue(uint64(m.I32Value))
	return n
}
func (m *KeyValue_StrValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.StrValue)
	n += 1 + l + sovValue(uint64(l))
	return n
}
func (m *KeyValue_I64Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovValue(uint64(m.I64Value))
	return n
}
func (m *KeyValue_Ui32Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovValue(uint64(m.Ui32Value))
	return n
}
func (m *KeyValue_Ui64Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovValue(uint64(m.Ui64Value))
	return n
}
func (m *UpdateValue) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}

func (m *TrunkTableValue) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovValue(uint64(l))
		}
	}
	return n
}

func (m *RefreshTableValue) Size() (n int) {
	var l int
	_ = l
	if len(m.InsertValue) > 0 {
		for _, e := range m.InsertValue {
			l = e.Size()
			n += 1 + l + sovValue(uint64(l))
		}
	}
	if len(m.UpdateValue) > 0 {
		for _, e := range m.UpdateValue {
			l = e.Size()
			n += 1 + l + sovValue(uint64(l))
		}
	}
	if len(m.DeleteValue) > 0 {
		for _, e := range m.DeleteValue {
			l = e.Size()
			n += 1 + l + sovValue(uint64(l))
		}
	}
	return n
}

func (m *TableValue) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *TableValue_TrunkValue) Size() (n int) {
	var l int
	_ = l
	if m.TrunkValue != nil {
		l = m.TrunkValue.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *TableValue_RefreshValue) Size() (n int) {
	var l int
	_ = l
	if m.RefreshValue != nil {
		l = m.RefreshValue.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *Value) Size() (n int) {
	var l int
	_ = l
	if m.Kind != nil {
		n += m.Kind.Size()
	}
	return n
}

func (m *Value_PrimitiveValue) Size() (n int) {
	var l int
	_ = l
	if m.PrimitiveValue != nil {
		l = m.PrimitiveValue.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *Value_PrimitiveValueWithQT) Size() (n int) {
	var l int
	_ = l
	if m.PrimitiveValueWithQT != nil {
		l = m.PrimitiveValueWithQT.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *Value_StructValue) Size() (n int) {
	var l int
	_ = l
	if m.StructValue != nil {
		l = m.StructValue.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *Value_ArrayValue) Size() (n int) {
	var l int
	_ = l
	if m.ArrayValue != nil {
		l = m.ArrayValue.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *Value_TableValue) Size() (n int) {
	var l int
	_ = l
	if m.TableValue != nil {
		l = m.TableValue.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *NamedValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovValue(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 2 + l + sovValue(uint64(l))
		}
	}
	return n
}

func (m *ValueSequnce) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovValue(uint64(l))
		}
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 2 + l + sovValue(uint64(l))
		}
	}
	return n
}

func (m *RtdValues) Size() (n int) {
	var l int
	_ = l
	if m.TimeStamp != 0 {
		n += 1 + sovValue(uint64(m.TimeStamp))
	}
	if m.Values != nil {
		l = m.Values.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}

func (m *RtdValue) Size() (n int) {
	var l int
	_ = l
	if m.TimeStamp != 0 {
		n += 1 + sovValue(uint64(m.TimeStamp))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}

func sovValue(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozValue(x uint64) (n int) {
	return sovValue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BinaryValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &PrimitiveValue_I32Value{v}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FltValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = &PrimitiveValue_FltValue{float32(math.Float32frombits(v))}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DblValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &PrimitiveValue_DblValue{float64(math.Float64frombits(v))}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &PrimitiveValue_BoolValue{b}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &PrimitiveValue_StrValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &PrimitiveValue_I64Value{v}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ui32Value", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &PrimitiveValue_Ui32Value{v}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ui64Value", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &PrimitiveValue_Ui64Value{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BinaryValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &PrimitiveValue_BinValue{v}
			iNdEx = postIndex
		case 241:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmptyValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmptyValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &PrimitiveValue_EmptyValue{v}
			iNdEx = postIndex
		case 242:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NullValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &PrimitiveValue_NullValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveValueWithQT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveValueWithQT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveValueWithQT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &PrimitiveValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArrayItemValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArrayItemValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArrayItemValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimitiveValueWithQT{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ArrayItemValue_PrimitiveValue{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ValueSequnce{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ArrayItemValue_StructValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArrayValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArrayValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArrayValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &ArrayItemValue{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnItemValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnItemValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnItemValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &PrimitiveValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &ColumnItemValue{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &KeyValue_I32Value{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &KeyValue_StrValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &KeyValue_I64Value{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ui32Value", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &KeyValue_Ui32Value{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ui64Value", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &KeyValue_Ui64Value{v}
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &KeyValue{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &RowValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrunkTableValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrunkTableValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrunkTableValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &RowValue{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshTableValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshTableValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshTableValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsertValue = append(m.InsertValue, &RowValue{})
			if err := m.InsertValue[len(m.InsertValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateValue = append(m.UpdateValue, &UpdateValue{})
			if err := m.UpdateValue[len(m.UpdateValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteValue = append(m.DeleteValue, &KeyValue{})
			if err := m.DeleteValue[len(m.DeleteValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrunkValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TrunkTableValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &TableValue_TrunkValue{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RefreshTableValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &TableValue_RefreshValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimitiveValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &Value_PrimitiveValue{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveValueWithQT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrimitiveValueWithQT{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &Value_PrimitiveValueWithQT{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ValueSequnce{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &Value_StructValue{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrayValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ArrayValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &Value_ArrayValue{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &Value_TableValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &google_protobuf2.Option{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueSequnce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueSequnce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueSequnce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &NamedValue{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &google_protobuf2.Option{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RtdValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RtdValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RtdValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = &ValueSequnce{}
			}
			if err := m.Values.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RtdValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RtdValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RtdValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &NamedValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthValue
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowValue
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipValue(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthValue = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValue   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("value.proto", fileDescriptorValue) }

var fileDescriptorValue = []byte{
	// 927 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xef, 0x6e, 0xe3, 0x44,
	0x10, 0xcf, 0x26, 0x4e, 0x9a, 0x8c, 0x43, 0x7b, 0x5d, 0xca, 0x61, 0x1d, 0xa7, 0xc8, 0x58, 0x3a,
	0x9d, 0xa5, 0xa2, 0x1c, 0x4d, 0x2b, 0x38, 0x84, 0x04, 0xa2, 0xe8, 0xa4, 0x20, 0xa4, 0x83, 0xee,
	0x95, 0xde, 0x37, 0x24, 0xa7, 0xde, 0xf6, 0x4c, 0x1d, 0xdb, 0xb5, 0xd7, 0x07, 0x79, 0x04, 0x3e,
	0xf1, 0x95, 0x67, 0x40, 0x42, 0xf7, 0x16, 0x88, 0x8f, 0x3c, 0x02, 0x2a, 0x4f, 0x00, 0x4f, 0x80,
	0xf6, 0x9f, 0xd7, 0xce, 0xa5, 0x69, 0x75, 0xdf, 0xbc, 0x33, 0xf3, 0xfb, 0xed, 0xcc, 0x6f, 0x76,
	0x26, 0x01, 0xfb, 0x65, 0x10, 0x97, 0x74, 0x9c, 0xe5, 0x29, 0x4b, 0x71, 0x77, 0x9e, 0x86, 0x34,
	0xbe, 0x77, 0xef, 0x3c, 0x4d, 0xcf, 0x63, 0xfa, 0x48, 0x18, 0x67, 0xe5, 0xd9, 0x23, 0xb6, 0xc8,
	0x54, 0x88, 0xf7, 0x29, 0xd8, 0x87, 0x51, 0x12, 0xe4, 0x8b, 0x13, 0x8e, 0xc3, 0x0e, 0x6c, 0x14,
	0xe5, 0xec, 0x78, 0x91, 0x51, 0x07, 0xb9, 0xc8, 0xef, 0x12, 0x7d, 0xc4, 0x18, 0xac, 0x30, 0x60,
	0x81, 0xd3, 0x76, 0x91, 0x3f, 0x24, 0xe2, 0xdb, 0x1b, 0x02, 0x3c, 0x99, 0x67, 0x4c, 0x62, 0x3d,
	0x1b, 0x06, 0x4f, 0xcb, 0x38, 0x96, 0x87, 0xdf, 0x3a, 0xb0, 0xf9, 0x6d, 0x1e, 0xcd, 0x23, 0x16,
	0xbd, 0xa4, 0x92, 0xfb, 0x3e, 0xf4, 0xa3, 0xfd, 0x89, 0xf8, 0x96, 0xe4, 0xd3, 0x16, 0xa9, 0x2c,
	0xdc, 0x7b, 0x16, 0x33, 0xe9, 0xe5, 0x77, 0xb4, 0xb9, 0x57, 0x5b, 0xb8, 0x37, 0x9c, 0x49, 0x6a,
	0xa7, 0xe3, 0x22, 0x1f, 0x71, 0xaf, 0xb6, 0xe0, 0x11, 0x0c, 0x66, 0x69, 0xaa, 0xdc, 0x96, 0x8b,
	0xfc, 0xfe, 0xb4, 0x45, 0x8c, 0x89, 0xa3, 0x0b, 0x96, 0x4b, 0x77, 0xd7, 0x45, 0xfe, 0x80, 0xa3,
	0xb5, 0x45, 0xe4, 0xf5, 0xd1, 0x81, 0xf4, 0xf6, 0x5c, 0xe4, 0x77, 0x44, 0x5e, 0xca, 0xc2, 0xb9,
	0xcb, 0x2a, 0xed, 0x0d, 0x17, 0xf9, 0x6f, 0x71, 0xee, 0xca, 0x24, 0xfd, 0x1a, 0xde, 0x77, 0x91,
	0x6f, 0x49, 0xbf, 0xc6, 0x7f, 0x08, 0xfd, 0x59, 0x94, 0x48, 0xf7, 0xc0, 0x45, 0xbe, 0x3d, 0xc1,
	0x63, 0xd1, 0x96, 0x71, 0x4d, 0x77, 0x7e, 0xa3, 0x8e, 0xc2, 0x07, 0x00, 0xb4, 0x52, 0xd5, 0xf9,
	0x17, 0x09, 0xd0, 0xb6, 0x02, 0x19, 0xbd, 0xa7, 0x2d, 0x52, 0x8b, 0xc3, 0x7b, 0x30, 0x48, 0xb4,
	0xfa, 0xce, 0x7f, 0x12, 0x74, 0x47, 0x81, 0xaa, 0xb6, 0xf0, 0xd4, 0xaa, 0xa8, 0xc3, 0x0d, 0xe8,
	0x8a, 0xd7, 0xe2, 0xfd, 0x8c, 0x60, 0xa7, 0xd9, 0xac, 0xe7, 0x11, 0x7b, 0x71, 0x74, 0xcc, 0x9b,
	0xce, 0xa2, 0xb9, 0x6c, 0x97, 0x45, 0xc4, 0x37, 0x7f, 0x22, 0x97, 0x65, 0x10, 0x47, 0x6c, 0x21,
	0xfa, 0x64, 0x11, 0x7d, 0xc4, 0x77, 0xa1, 0x57, 0xb0, 0x80, 0x95, 0x85, 0x68, 0x91, 0x45, 0xd4,
	0x09, 0xef, 0xaa, 0x7b, 0x44, 0x6b, 0xec, 0xc9, 0x3b, 0x2a, 0xab, 0xe6, 0x8d, 0x44, 0xe5, 0xf2,
	0x0a, 0xc1, 0xe6, 0x17, 0x79, 0x1e, 0x2c, 0xbe, 0x62, 0x74, 0x2e, 0x4b, 0xdb, 0x81, 0x6e, 0x94,
	0x84, 0xf4, 0x27, 0xf5, 0x24, 0xe5, 0x01, 0x3f, 0x81, 0xcd, 0xac, 0xc1, 0x20, 0xd2, 0xb1, 0x27,
	0xef, 0xad, 0xa4, 0x97, 0x05, 0x4d, 0x5b, 0x64, 0x09, 0x84, 0x3f, 0x06, 0xbb, 0x60, 0x79, 0x79,
	0xca, 0xcc, 0xe3, 0xb2, 0x27, 0x6f, 0x2b, 0x0e, 0x61, 0x7b, 0x46, 0x2f, 0xcb, 0xe4, 0x94, 0x6b,
	0x57, 0x8f, 0x34, 0xea, 0x7d, 0x02, 0x20, 0x12, 0x96, 0x7c, 0x55, 0xb1, 0xc8, 0xed, 0xd4, 0x8a,
	0x6d, 0x96, 0xa4, 0x8b, 0xfd, 0x1e, 0xb6, 0xbe, 0x4c, 0xe3, 0x72, 0x9e, 0x98, 0x62, 0x47, 0x00,
	0xa7, 0xc2, 0xf4, 0x34, 0x50, 0xc2, 0x0f, 0x48, 0xcd, 0x62, 0xf8, 0xdb, 0xb7, 0x10, 0xf3, 0x31,
	0xf4, 0x49, 0xfa, 0xa3, 0x24, 0xfe, 0xa0, 0x99, 0xd8, 0x5d, 0x05, 0x5c, 0xba, 0x5f, 0x23, 0x7f,
	0x47, 0xd0, 0xff, 0x9a, 0x2e, 0x6e, 0x39, 0xb9, 0xd5, 0x74, 0xb5, 0xd7, 0x4e, 0x57, 0x67, 0xfd,
	0x74, 0x59, 0x37, 0x4c, 0x57, 0xf7, 0xb5, 0xe9, 0x32, 0x4d, 0x78, 0x0e, 0xf6, 0x77, 0x59, 0x18,
	0x30, 0xd5, 0xd5, 0xf7, 0xa1, 0x73, 0x41, 0x17, 0x8e, 0x1c, 0x83, 0x2d, 0x55, 0xaa, 0xae, 0x87,
	0x70, 0x1f, 0x7e, 0xd0, 0x14, 0x52, 0x07, 0x69, 0xbd, 0x8c, 0x84, 0x5b, 0xc7, 0x79, 0x99, 0x5c,
	0x1c, 0x07, 0xb3, 0x58, 0x91, 0x3f, 0x68, 0x2a, 0x79, 0x1d, 0xf2, 0x15, 0x82, 0x6d, 0x42, 0xcf,
	0x72, 0x5a, 0xbc, 0xa8, 0x81, 0xf7, 0xc0, 0x8e, 0x92, 0x82, 0xe6, 0xec, 0x64, 0x1d, 0x45, 0x3d,
	0x06, 0x1f, 0x80, 0x5d, 0x9a, 0xda, 0x9c, 0xb6, 0x80, 0xe8, 0x2d, 0x52, 0xab, 0x9a, 0xd4, 0xc3,
	0xf8, 0x45, 0x21, 0x8d, 0xa9, 0x46, 0x75, 0x1a, 0x17, 0x55, 0x52, 0xd4, 0x63, 0xbc, 0x5f, 0x10,
	0x40, 0x2d, 0xd5, 0xc7, 0x00, 0x8c, 0x97, 0x6e, 0x1a, 0x6f, 0x9e, 0xcd, 0x92, 0x26, 0x7c, 0x19,
	0x99, 0x58, 0xfc, 0x19, 0x0c, 0x73, 0x59, 0x79, 0x7d, 0x32, 0x1d, 0x5d, 0xe5, 0xb2, 0x28, 0xd3,
	0x16, 0x69, 0xc4, 0x9b, 0xb6, 0xfe, 0xd1, 0x86, 0xae, 0xa4, 0xfc, 0xfc, 0xb5, 0x71, 0x47, 0x6b,
	0x06, 0x60, 0xc5, 0xa0, 0x1f, 0xc1, 0x4e, 0xb6, 0x62, 0x25, 0xdc, 0x6e, 0x6b, 0xac, 0x84, 0xbe,
	0xf1, 0xee, 0xc0, 0xfb, 0x00, 0x41, 0xb5, 0x32, 0xd4, 0x5a, 0xdc, 0xae, 0x6f, 0x8a, 0x4a, 0x54,
	0x13, 0xc6, 0x41, 0xac, 0x92, 0x4c, 0x0c, 0x83, 0x01, 0x2d, 0x75, 0xa2, 0x3a, 0x1d, 0xf6, 0xc0,
	0xba, 0x88, 0x92, 0xd0, 0xbb, 0x04, 0xe0, 0xeb, 0x23, 0x94, 0x54, 0x18, 0xac, 0xc4, 0xac, 0x17,
	0xf1, 0x8d, 0xbd, 0xe6, 0x3c, 0x0c, 0xeb, 0x65, 0xa8, 0x27, 0x8d, 0x77, 0xc1, 0x62, 0xc1, 0x79,
	0xe1, 0x84, 0xe2, 0x31, 0xbd, 0x3b, 0x96, 0x7f, 0x2c, 0xc6, 0xfa, 0x8f, 0xc5, 0xf8, 0x9b, 0x8c,
	0x45, 0x69, 0x42, 0x44, 0x90, 0xf7, 0x03, 0x0c, 0xeb, 0x1a, 0xe0, 0x87, 0xcd, 0xb1, 0xd1, 0xa9,
	0x9b, 0xb4, 0xf4, 0x2d, 0x7b, 0xb0, 0x91, 0x0a, 0xa2, 0x1b, 0x2f, 0xd2, 0x71, 0xde, 0x09, 0x0c,
	0x08, 0x93, 0x2c, 0x05, 0xbe, 0x0f, 0x03, 0xfe, 0x4b, 0xf5, 0x8c, 0x05, 0xf3, 0x4c, 0xfd, 0x74,
	0x19, 0x03, 0xde, 0x85, 0x9e, 0xb8, 0xa6, 0x50, 0x85, 0xae, 0xea, 0x17, 0x51, 0x21, 0xde, 0x11,
	0xf4, 0x35, 0xef, 0x0d, 0xb4, 0x0f, 0x9b, 0xf2, 0x5d, 0x5b, 0xdd, 0xe1, 0x9d, 0x3f, 0xaf, 0x46,
	0xe8, 0xaf, 0xab, 0x11, 0xfa, 0xfb, 0x6a, 0x84, 0x7e, 0xfd, 0x67, 0xd4, 0x9a, 0xf5, 0x44, 0x59,
	0xfb, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x56, 0x15, 0xe4, 0xbc, 0x09, 0x00, 0x00,
}
